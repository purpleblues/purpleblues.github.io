---
layout: post
title:  "진행상황"
---

# Adding multi-database transaction atomicity in WAL journaling mode in SQLite.


## Progress
- crash simulation 환경 구축 함. sqlite 자체 내장 test tool을 이용.
- solution을 확립하고 가다듬어 프로토타입 제작중. 아래에 서술

## Problem

- 기존 journaling mode는 여러 db 를 `ATTACH`하여 트랜잭션을 수행하다 crash가 생길 경우 db를 다시 열어서 read를 수행할때 journal file을 확인하고 master journal file을 확인하여 recovery를 수행한다. WAL은 확인할 master journal file이 없기 때문에 다른 db의 transaction failure를 전혀 신경쓰지 않고, recovery를 수행한다. 이 때문에 다른 db와의 atomicity가 깨지게 된다.

## Solution

- 이를 해결하기 위한 solution을 고안하였다. 크게 두 부분으로 나눌 수 있다. WAL 모드에서 기존 journaling mode와 동일하게 master journal file을 만들고 `.db-mj-store` 파일 이름을 저장하는 부분과 `.db-mj-store` 파일에 master journal file name 과 `mxFrame`을 저장하는 것이다.



### Master journal file

`COMMIT`을 수행할 경우 `vdbeCommit()`에서 master journal 이 필요한지 아닌지를 결정하는데, 이때 WAL 의 경우 아예 필요 없다고 0으로 배열에 박아놓은 부분이 있다. 그래서 이 부분을 1로 바꾸었다.

![aMJNeeded](/_posts/2016-08-09-progress/aMJNeeded.png)

master journal에 각 db의 journal name을 저장하는 부분에서 WAL의 경우 .db-mj-store 파일 이름을 저장하도록 하였다. 이를 위해 `Pager` 구조체에 `char* zMasterStore` 라는 변수를 추가하고 함수를 추가하였다.

![master_store](/_posts/2016-08-09-progress/master_store.png)


`sqlite3PagerCommitPhaseOne()` 에서 기존 journal mode에서는 `writeMasterJournal()` 이라는 함수로 journal file에 master journal file name을 저장한다. 이 과정은 WAL일때는 일어나지 않도록 분기 되어있는데, WAL에서도 비슷한 작업을 하도록 `writeWalMasterStoreFile()` 라는 함수를 만들어서 실행하도록 하였다. 이 함수에서는 .db-mj-store파일에 master journal file name과 mxFrame을 저장한다. 이 파일의 포맷은 아직 확정되지는 않았다. mxFrame에 대해서는 아래에 설명하도록 하겠다.

![commit_write_master_store](/_posts/2016-08-09-progress/commit_write_master_store.png)


crash가 발생하여 복구를 해야할 경우, `walIndexRecover()`라는 함수에서 이를 수행하게 된다. 이 함수에서는 WAL파일의 frame들을 차례로 읽어들이면서 valid한 프레임을 남기고 index를 만든다. 이 과정에서 multi-database transaction이 완전히 수행 되지 않았다면 WAL파일에서 transaction 시작 이전의 프레임들만 남겨야한다. 이때 시작 이전 프레임을 뜻하는 것이 `mxFrame`이다. 트랜잭션을 시작하기 전 WAL 파일의 frame갯수를 저장하고 복구를 해야하는 경우 mxFrame 이상의 프레임이 있더라도 이를 무시하게 하는 것이다. 이를 통해 atomicity를 보장하게 할 수 있다.

이 과정을 예를 들면 다음과 같다.

test.db와 test2.db가 있고 둘다 journaling mode가 WAL이라고 하자.

test.db를 열어서 test2.db를 `ATTACH` 하고 transaction을 시작한다. 이때 생기는 파일들은 다음과 같다.

`test.db-wal`
`test.db-shm`
`test.db-mj-store`

`test2.db-wal`
`test2.db-shm`
`test2.db-mj-store`

`test.db-mjXXXX` (XXXX는 랜덤)


.db-mj-store에서는 test.db-mjXXXX와 트랜잭션을 시작하기 전 각각의 WAL의 mxFrame을 기록하고 있다.
이때 crash가 발생할 경우 각 db를 열어서 read를 수행할때 복구를 시행하는데, 이때 .db-mj-store파일을 열어서 기존 master journal을 확인하고 journaling mode와 같은 원리로 .db-mj-store파일의 hot or not hot을 구분한다. 복구가 필요할 경우 mxFrame만큼만 복구를 한다.








